package spike.core;

import Assembler from spike.core.Assembler;
import Log from spike.core.Log;
import Util from spike.core.Util;
import Reconcile from spike.core.Reconcile;

static class Watchers {

    watchers: {},

    compileWatchers: function(scope){

        var watchers = [];

        if(this.watchers[Assembler.sourcePath+"_"+scope.templatePath]){
            watchers = this.watchers[Assembler.sourcePath+"_"+scope.templatePath](scope);
        }

        if(watchers.length > 0){

          var virtualDom = document.createElement('div');
          virtualDom.innerHTML = scope.compiledHtml;
          var watchElements = virtualDom.querySelectorAll('[sp-watch]');

          for(var i = 0; i < watchElements.length; i++){

            for(var k = 0; k < watchers.length; k++){

                if(watchers[k][0] === watchElements[i].getAttribute('sp-watch')){

                    var currentHtml = watchElements[i].outerHTML;
                    var watcherHtml = $this.fillAutoSelectors(watchers[k][1], currentHtml);;

                   // console.log(currentHtml);
                  //  console.log(watcherHtml);

                    if(Util.hashString(watcherHtml) !== Util.hashString(currentHtml)){

                        Log.log('Watcher reflow needed');
                        $this.replaceChangedElements(watcherHtml, watchElements[i]);

                    }

                }

            }

          }

        }

    },

    replaceChangedElements: function(watcherHtml, currentElement){

        var watcherVirtual = document.createElement('div');
        watcherVirtual.innerHTML = watcherHtml;

        console.log('apply changes');
        console.log(watcherVirtual.firstChild);
        console.log(currentElement);

        var changes = diff(currentElement, watcherVirtual.firstChild);
        console.log(changes);

       // apply(changes, document.getElementById(currentElement.id));

      //  Reconcile.applyChanges(watcherVirtual.firstChild, document.getElementById(currentElement.id));

    },

    fillAutoSelectors: function(watcherHtml, currentHtml){

        var idListFromWatcher = Util.findStringBetween(watcherHtml, 'id="','"');
        var idListFromCurrent = Util.findStringBetween(currentHtml, 'id="','"');
        var replaced = {};

        for(var i = 0; i < idListFromWatcher.length; i++){

            for(var k = 0; k < idListFromCurrent.length; k++){

                if(idListFromCurrent[k].indexOf(idListFromWatcher[i]) > -1 && !replaced[idListFromCurrent[k]] ){
                    watcherHtml = watcherHtml.replace('id="'+idListFromWatcher[i]+'"', 'id="'+idListFromCurrent[k]+'"');
                    replaced[idListFromCurrent[k]] = true;
                }else if(idListFromCurrent[k].indexOf(idListFromWatcher[i]) > -1 && replaced[idListFromCurrent[k]]){
                    watcherHtml = watcherHtml.replace('id="'+idListFromWatcher[i]+'"', 'id="gen-'+Util.hash()+'"');
                }

            }

        }

        var namesListFromWatcher = Util.findStringBetween(watcherHtml, 'name="','"');
        var namesListFromCurrent = Util.findStringBetween(currentHtml, 'name="','"');

        for(var i = 0; i < namesListFromWatcher.length; i++){

            for(var k = 0; k < namesListFromCurrent.length; k++){

                if(namesListFromCurrent[k].indexOf(namesListFromWatcher[i]) > -1){
                    watcherHtml = watcherHtml.replace('name="'+namesListFromWatcher[i]+'"', 'name="'+namesListFromCurrent[k]+'"');
                }

            }

        }

        return watcherHtml;

    },

    cleanAutoSelectors: function(html){

        var element = document.createElement('div');
        element.innerHTML = html;

        var idElements = element.querySelectorAll('[id]');
        for(var i = 0; i < idElements.length; i++){
            idElements[i].setAttribute('id', '');
        }

        var nameElements = element.querySelectorAll('[name]');
        for(var i = 0; i < nameElements.length; i++){
            nameElements[i].setAttribute('name', '');
        }

        return element.innerHTML;

    },

    scopes: {},
    observables: [],

    observe: function(scope){
        this.observables.push(scope);
    },

    excludedProperties: [
        'childElements',
        'parentElement',
        'eventsSelectors',
        'linksSelectors',
        'compiledHtml',
        'elementSelector',
        'templatePath',
        'selector'
    ],

    stringifyScope: function(scope){

        var stringify = '';

        for(var key in scope) {
            if(typeof scope[key] !== 'function'){

                if($this.excludedProperties.indexOf(key) == -1){
                  stringify += key + JSON.stringify(scope[key]);
                }

            }

        }

        return stringify;

    },

    detectScopeChange: function(scope){

        var stringify = $this.stringifyScope(scope);

        if($this.scopes[scope.elementId] && stringify !== $this.scopes[scope.elementId]){
            Log.log('scope changed');
            $this.compileWatchers(scope);
        }

        $this.scopes[scope.elementId] = stringify;

    },

    createWatchLoop: function(scope){

        setTimeout(function(){

            for(var i = 0; i < $this.observables.length; i++){
                $this.detectScopeChange($this.observables[i]);
            }

            $this.createWatchLoop();

        }, 100)

    }

}