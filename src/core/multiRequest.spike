package spike.core;

import Log from spike.core.Log;
import Request from spike.core.Request;

class MultiRequest {

    responseData: [],
    alwaysCallbacks: [],

    countResponses: 0,
    promisesLength: 0,

    resolved: false,

    MultiRequest: function(promises){

        $this.promisesLength = promises.length;

        for(var i = 0; i < promises.length; i++){

            promises[i].always(function(xhr, response, status){
                $this.countResponses++;

                if(this instanceof Request){

                    if(xhr.response){
                        xhr.response = JSON.parse(xhr.response);
                    }

                    $this.responseData.push(xhr);
                }else{
                    $this.responseData.push(xhr);
                }

                if($this.resolved == false && $this.countResponses === $this.promisesLength){
                    $this.resolveAlways();
                    $this.resolved = true;
                }

            });

        }

    },

    always: function (callback) {
        console.log('always adding')
        $this.alwaysCallbacks.push(callback);
        return $this;
    },

    resolveAlways: function(){

        for(var i = 0; i < $this.alwaysCallbacks.length; i++){
            $this.alwaysCallbacks[i].apply($this, [$this.responseData]);
        }

    }

}