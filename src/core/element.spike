package spike.core;

import System from spike.core.System;
import Config from spike.core.System.config;
import Templates from spike.core.Templates;
import Errors from spike.core.Errors;
import Selectors from spike.core.Selectors;

class Element {

    rendered: false,

    elementId: null,
    elementSelector: null,

    compiledHtml: null,

    parentElement: null,
    childElements: [],

    selector: {},
    eventsSelectors: [],
    linksSelectors: [],

    templatePath: null,

    rootSelector: function(){

        if(this.elementSelector === null){
            this.elementSelector = document.getElementById(this.elementId);
        }

        return this.elementSelector;
    },

    Element: function(parentElement){
     this.Element(parentElement, null);
    },

    Element: function(parentElement, params){

        this.constructor_0();

        if(parentElement){
            this.parentElement = parentElement.isClass ? parentElement : null;
        }

        this.margeParams(params);

        this.createTemplatePath();
        this.createTemplate();

    },

    margeParams: function(params){

        if(params){
            for(var prop in params){
                this[prop] = params[prop];
            }
        }

    },

    include: function(childElement){

        this.childElements.push(childElement);
        return childElement.compiledHtml;

    },

    createTemplatePath: function(){

        this.templatePath = '';

        var elementPath = this.getClass().split('.');

        for(var i = 0; i < elementPath.length; i++){
            this.templatePath += elementPath[i].toLowerCase()+'_';
        }

        this.templatePath = this.templatePath.substring(0, this.templatePath.lastIndexOf('_'))+'_html';

        return this.templatePath;

    },

    createTemplate: function () {

     this.compiledHtml = Templates.compileTemplate(this, this.templatePath);

     var selectorsObj = Selectors.createUniqueSelectors(this.compiledHtml);

     this.compiledHtml = selectorsObj.html;
     this.selector = selectorsObj.selectors;
     this.eventsSelectors = selectorsObj.eventsSelectors;
     this.linksSelectors = selectorsObj.linksSelectors;

    },

    reloadElement: function(element, params){
    //TODO
    },

    postConstructChildren: function(){

        for(var i = 0; i < this.childElements.length; i++){
            this.childElements[i].postConstruct();
        }


    },

    abstract function render;
    abstract function postConstruct;

}