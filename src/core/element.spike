package spike.core;

import System from spike.core.System;
import Config from spike.core.System.config;
import Templates from spike.core.Templates;
import Errors from spike.core.Errors;
import Selectors from spike.core.Selectors;
import Assembler from spike.core.Assembler;
import Events from spike.core.Events;

class Element {

    rendered: false,

    elementId: null,
    elementSelector: null,

    compiledHtml: null,

    parentElement: null,
    childElements: [],

    selector: {},
    eventsSelectors: [],
    linksSelectors: [],

    templatePath: null,

    rootSelector: function(){

        if(this.elementSelector === null){
            this.elementSelector = document.getElementById(this.elementId);
        }

        return this.elementSelector;
    },

    Element: function(parentElement){
     this.Element(parentElement, null);
    },

    Element: function(parentElement, params){

        this.constructor_0();

        if(parentElement){
            this.parentElement = parentElement.isClass ? parentElement : null;
        }

        this.margeParams(params);

        this.createTemplatePath();
        this.createTemplate();

    },

    margeParams: function(params){

        if(params){
            for(var prop in params){
                this[prop] = params[prop];
            }
        }

    },

    include: function(childElement){

        childElement.extractElementId();

        this.childElements.push(childElement);
        return childElement.compiledHtml;

    },

    extractElementId: function(){

        var virtualElement = document.createElement('div');
        virtualElement.innerHTML = this.compiledHtml;

        this.elementId = virtualElement.firstChild.id;

    },

    createTemplatePath: function(){

        this.templatePath = '';

        var elementPath = this.getClass().split('.');

        for(var i = 0; i < elementPath.length; i++){
            this.templatePath += elementPath[i]+'_';
        }

        this.templatePath = this.templatePath.substring(0, this.templatePath.lastIndexOf('_'))+'_html';
        this.templatePath = this.templatePath.toLowerCase();

        return this.templatePath;

    },

    createTemplate: function () {

     this.compiledHtml = Templates.compileTemplate(this, this.templatePath);
     Selectors.createUniqueSelectors(this);

    },

    reloadElement: function(element, params){
    //TODO
    },

    postConstructChildren: function(){

        for(var i = 0; i < this.childElements.length; i++){
            this.childElements[i].postConstruct();
        }

    },


    triggers: {},

    trigger: function(triggerName, params){

        if(!this.triggers[triggerName]){
           Errors.throwError(Errors.messages.TRIGGER_NOT_DEFINED, [triggerName, scope.getClass()]);
        }

        var triggerDestinationElement = this.selector[this.triggers[triggerName].triggerId]();

        switch(this.triggers[triggerName].triggerType){
            case 'T' :
                triggerDestinationElement.innerHTML = Templates.includeTemplate(this.triggers[triggerName].modulePath, params || this, this);
            break;
            case 'E' :
                var elementInstance = Assembler.getClassInstance(this.triggers[triggerName].modulePath, [this, params || {}]);
                triggerDestinationElement.innerHTML = this.include(elementInstance);
            break;
        }

    },

    addTrigger: function(triggerType, modulePath, triggerName, triggerId){

        this.triggers[triggerName] = {
            triggerId: triggerId,
            modulePath: modulePath,
            triggerType: triggerType
        };

    },

    addTriggerElement: function(elementClassName, triggerName, triggerId){

        this.addTrigger('E', elementClassName, triggerName, triggerId);
        return '';

    },

    addTriggerTemplate: function(templateName, triggerName, triggerId){

        this.addTrigger('T', templateName, triggerName, triggerId);
        return '';

    },

    destroy: function(){
        Events.removeEventListeners(this);

        if(this.childElements.length > 0){
            for(var i = 0; i < this.childElements.length; i++){
                this.childElements[i].destroy();
            }
        }

    },

    abstract function render;
    abstract function postConstruct;

}