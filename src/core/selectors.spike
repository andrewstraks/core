package spike.core;

import Selectors from spike.core.Selectors;
import Util from spike.core.Util;
import Watchers from spike.core.Watchers;

static class Selectors {

 /**
   * @public
   *
   * Counter for selectors cache for
   * debug proposes
   *
   */
  cacheUsageCounter: 0,

  /**
   * @public
   *
   * Storage for cached once used selectors
   *
   */
  selectorsCache: {},

  /**
   * @public
   *
   * Clears selectors cache, should be executed before
   * new controller rendering
   *
   */
  clearSelectorsCache: function () {
    this.selectorsCache = {};
  },

  /**
   * @public
   *
   * Clears selector given id from cache
   *
   * @param selectorId
   */
  clearSelectorInCache: function (selectorId) {

    if (this.selectorsCache[selectorId]) {
      this.selectorsCache[selectorId] = null;
    }

  },

  createFormsSelectors: function(element, selectors){

    //Retrieving list of form elements names
    var formsWithNames = element.querySelectorAll('form[name]');

    function getSelectorFn(name, newName) {
        return function() {

            var selector = Selectors.selectorsCache[newName];

            if (selector === undefined) {
                selector = document.querySelector('form[name="'+newName+'"]');
                selector.plainName = name;
                selector.serialize = Util.serializeForm.bind(selector);

                Selectors.selectorsCache[newName] = selector;
            } else {
                Selectors.cacheUsageCounter++;
            }

            return selector;

        };
    };

    for(var i = 0; i < formsWithNames.length; i++){

        if(formsWithNames[i].getAttribute('sp-keep-name') != null){
            continue;
        }

        var name = formsWithNames[i].getAttribute('name');

        //Creating new hash for identifier
        var newName = name + '-' + Util.hash();
        selectors.forms[name] = getSelectorFn(name, newName);
        formsWithNames[i].setAttribute('name', newName);

    }

    return element.innerHTML;

  },

  createNamesSelectors: function(element, selectors){

    //Retrieving list of form elements names
    var elementsWithNames = element.querySelectorAll('[name]');

    function getSelectorFn(name, newName) {
        return function() {

            var selector = Selectors.selectorsCache[newName];

            if (selector === undefined) {
                selector = document.querySelector('[name="'+newName+'"]');
                selector.plainName = name;
                Selectors.selectorsCache[newName] = selector;
            } else {
                Selectors.cacheUsageCounter++;
            }

            return selector;

        };
    };

    //Creating names selectors functions
    for(var i = 0; i < elementsWithNames.length; i++){

        if(elementsWithNames[i].getAttribute('sp-keep-name') != null || elementsWithNames[i].tagName.toLowerCase() === 'form' || elementsWithNames[i].type === 'radio'){
            continue;
        }

        var name = elementsWithNames[i].getAttribute('name');

        //Creating new hash for identifier
        var newName = name + '-' + Util.hash();
        selectors.names[name] = getSelectorFn(name, newName);
        elementsWithNames[i].setAttribute('name', newName);

    }

    return element.innerHTML;

  },

  createIdSelectors: function(element, selectors, eventsSelectors, linksSelectors){

    var elementsWithId = element.querySelectorAll('[id]');

    function getSelectorFn(newId) {
        return function() {

            var selector = Selectors.selectorsCache[newId];

            if (selector === undefined) {
              selector = document.getElementById(newId);
              selector.plainId = newId;
              Selectors.selectorsCache[newId] = selector;
            } else {
              Selectors.cacheUsageCounter++;
            }

            return selector;

        };
    };

   //Creating identifiers selectors functions
   for(var i = 0; i < elementsWithId.length; i++){

    if(elementsWithId[i].getAttribute('sp-keep-id') != null || elementsWithId[i].id.indexOf('-sp-') > -1){
        continue;
    }

    //Creating new hash for identifier
    var newId = elementsWithId[i].id + '-sp-' + Util.hash();

    //Creating handler function for identifier with optional basic events binding by @jQuery
    selectors[elementsWithId[i].id] = getSelectorFn(newId);

    if(elementsWithId[i].getAttribute('spike-unbinded') != null){
        eventsSelectors.push(newId);
    }

    if(elementsWithId[i].getAttribute('spike-href') != null){
        linksSelectors.push(newId);
    }

    elementsWithId[i].id = newId;

   }

   return element.innerHTML;

  },

  /**
   * @public
   *
   * Function creates selectors for passed HTML @string based
   * on @attr id and @attr name.
   * Function returns set of methods as @jQuery selectors getters
   * and processed HTML @string with replaced attributes with
   * special hashes
   *
   * @param templateHtml
   *
   */
   createUniqueSelectors: function (scope) {

    var element = document.createElement('div');
    element.innerHTML = scope.compiledHtml;

    scope.selector = {
        names: {},
        forms: {}
    };

    scope.eventsSelectors = [];
    scope.linksSelectors = [];

    var newCompiledHtml =  this.createFormsSelectors(element, scope.selector, scope.selector);
    newCompiledHtml = this.createNamesSelectors(element, scope.selector);
    newCompiledHtml = this.createIdSelectors(element, scope.selector, scope.eventsSelectors, scope.linksSelectors);

    scope.compiledHtml = newCompiledHtml;

  },

  createUniqueSelectorsForElement: function(scope, element){

    var newCompiledHtml = this.createFormsSelectors(element, scope.selector, scope.selector);
    newCompiledHtml = this.createNamesSelectors(element, scope.selector);
    newCompiledHtml = this.createIdSelectors(element, scope.selector, scope.eventsSelectors, scope.linksSelectors);

    return newCompiledHtml;

  }


}