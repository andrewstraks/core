package spike.core;

import Log from spike.core.Log;

static class Reconcile {

    removeAttributes: false,

    applyChanges: function(source, target) {

      if ((source.nodeType  === 3 && target.nodeType === 3) || (source.nodeType === 8 && target.nodeType === 8)) {

        if (target.nodeValue !== source.nodeValue) {
          target.nodeValue = source.nodeValue;
        }

        return;
      }

      if (source.attributes && target.attributes) {

        var attributes = source.attributes;
        var value;
        var name;

        for (var i = 0; i < attributes.length; i++) {

          value = attributes[i].nodeValue;
          name = attributes[i].nodeName;

          if (target.getAttribute(name) !== value) {
            target.setAttribute(name, value);
          }

        }

        if (this.removeAttributes){
          attributes = target.attributes;

          for (var i = 0; i < attributes.length; i++) {

            name = attributes[i].nodeName;

            if (source.getAttribute(name) === null) {
              target.removeAttribute(name);
            }

          }

        }

      }

      if (source.isEqualNode(target)){
        return;
      }

      if (source.childNodes && target.childNodes) {

        var nodes = source.childNodes;

        for (var i = 0; i < nodes.length; i++) {
            target.insertBefore(nodes[i].cloneNode(true), target.childNodes[i]);
        }

        while (target.childNodes.length > source.childNodes.length) {

          var remove = target.childNodes[target.childNodes.length -1];
          target.removeChild(remove);

        }

      }

      var length = source.childNodes.length;
      if (length) {

        for (var i = 0; i < length; i++) {
          this.applyChanges(source.childNodes[i], target.childNodes[i]);
        }

      }

    }

}
