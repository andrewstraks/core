package spike.core;

import Errors from spike.core.Errors;
import Util from spike.core.Util;

class Request {

    /**
    url: string
    type: string,
    data: obj || string,
    beforeSend: function () {},
    complete: function (xhr) {},
    headers: map,
    contentType: string
    **/
    config: null,
    xhr: null,
    catchCallbacks: [],
    thenCallbacks: [],
    alwaysCallbacks: [],
    response: null,

    responseType: 'json',

    STATUS: {
        DONE: 4,
        LOADING: 3,
        HEADERS_RECEIVED: 2,
        OPENED: 1,
        UNSENT: 0
    },

    Request: function(config){

        this.config = this.setConfig(config);
        this.xhr = this.createXHR();

        this.xhr.alias = this.config.alias;
        this.setEvents();
        this.setHeaders();

        this.config.beforeSend();
        this.xhr.send(this.config.data);


    },

    setConfig: function(config){

        if(config === undefined || config === null){
            Errors.throwError(Errors.messages.REQUEST_WRONG_PARAMS, []);
        }

        if(config.url === undefined || config.type === undefined){
            Errors.throwError(Errors.messages.REQUEST_WRONG_PARAMS, []);
        }

        if(config.headers === undefined){
            config.headers = {};
        }

        if(config.contentType === undefined){
            config.contentType = 'application/json';
        }

        config.headers['Content-Type'] = config.contentType;

        if(config.request === undefined){
            config.request = {};
        }

        if(typeof config.request !== 'string'){

            try {
                config.data = JSON.stringify(config.data);
            }catch(e){
                console.error(e);
                Errors.thrownError(Errors.JSON_PARSE_ERROR, [config.url]);
            }

        }

        if(config.beforeSend === undefined){
            config.beforeSend = function() { };
        }

        if(config.complete === undefined){
            config.complete = function() { };
        }

        return config;

    },

    setEvents: function(){

        this.xhr.open(this.config.type, this.config.url, true);

        this.xhr.onreadystatechange = function() {

             if($this.xhr.readyState === $this.STATUS.DONE && $this.xhr.status === 200) {

                if($this.responseType === 'json'){

                    try {
                        $this.xhr.responseJSON = JSON.parse($this.xhr.responseText);
                        $this.response = JSON.parse($this.xhr.responseText);
                        $this.resolveThen($this.response, $this.xhr, $this.xhr.status);
                        $this.resolveAlways($this.xhr, $this.response, $this.xhr.status);
                    }catch(e){
                        console.error(e);
                        $this.resolveCatch($this.xhr, 0, e);
                        $this.resolveAlways($this.xhr, $this.response, $this.xhr.status);
                    }


                }else if($this.responseType === 'xml'){
                    $this.resolveThen($this.xhr.responseXML, $this.xhr, $this.xhr.status);
                    $this.resolveAlways($this.xhr, $this.response, $this.xhr.status);
                }

              }else if($this.xhr.readyState === $this.STATUS.DONE && $this.xhr.status === 204){
                $this.resolveThen(null, $this.xhr, $this.xhr.status);
                $this.resolveAlways($this.xhr, $this.response, $this.xhr.status);
              }else if($this.xhr.readyState === $this.STATUS.DONE && $this.xhr.status !== 200){
                $this.resolveCatch($this.xhr, $this.xhr.status, new Error('Response error: '+$this.xhr.status));
                $this.resolveAlways($this.xhr, $this.response, $this.xhr.status);
              }


        };


    },

    setHeaders: function(){

        this.xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

        for(var headerName in this.config.headers){
            this.xhr.setRequestHeader(headerName, this.config.headers[headerName]);
        }

        if(this.config.headers['Content-Type'].indexOf('xml') > -1){
            this.responseType = 'xml';
        }

    },

    always: function (callback) {
        this.alwaysCallbacks.push(callback);
        return this;
    },

    resolveAlways: function(response, xhr, status){

        for(var i = 0; i < this.alwaysCallbacks.length; i++){
            this.alwaysCallbacks[i](response, xhr, status);
        }

    },

    then: function (callback) {
        this.thenCallbacks.push(callback);
        return this;
    },

    resolveThen: function(response, xhr, status){

        for(var i = 0; i < this.thenCallbacks.length; i++){
            this.thenCallbacks[i](response, xhr, status);
        }

    },

    catch: function (callback) {
        this.catchCallbacks.push(callback);
        return this;
    },

    resolveCatch: function(xhr, status, thrownError){

        for(var i = 0; i < this.catchCallbacks.length; i++){
            this.catchCallbacks[i](xhr, status, thrownError);
        }

    },

    createXHR: function() {

        var xhr;
        if (window.XMLHttpRequest) {
            xhr = new XMLHttpRequest();
        } else if (window.ActiveXObject) {
            try {
                xhr = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
                console.warn(e);
                xhr = new ActiveXObject("Microsoft.XMLHTTP");
            }
        }

        return xhr;

    }

}